<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9
                  http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

    <changeSet id="20130204-true-false-concept-uuids" author="djazayeri">
        <comment>
            Setting the UUIDs for the automatically-generated 'true' and 'false' concepts to match those used by PIH broadly
        </comment>
        <update tableName="concept">
            <column name="uuid" value="3cd6f600-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 1</where>
        </update>
        <update tableName="concept">
            <column name="uuid" value="3cd6f86c-26fe-102b-80cb-0017a47871b2" />
            <where>concept_id = 2</where>
        </update>
    </changeSet>

    <changeSet id="20140225-set-obs-datetime-to-encounter-datetime" author="djazayeri">
        <validCheckSum>3:99e86d9bba040f7d0b4185661bb92b40</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                select count(*) from global_property where property = 'mirebalais.UHM-1065.setObsDatetimeToEncounterDatetime'
            </sqlCheck>
        </preConditions>
        <comment>
            See UHM-1065.
            In our present information model, all Obs.obsDatetime should be equal to Obs.encounter.encounterDatetime,
            however due to a bug, 2/3 of obs are stored with the wrong datetime (though the vast majority are off by
            less than a day).
            This changeset is written so it gets run only one time, in case in the future we change our information
            model to include obs whose datatime is not equal to the encounter they are in (e.g. a form that captures
            multiple past lab results, each with its own date).
        </comment>
        <sql>
            update obs o, encounter e
            set o.obs_datetime = e.encounter_datetime
            where o.encounter_id = e.encounter_id
            and o.obs_datetime != e.encounter_datetime
        </sql>
    </changeSet>

    <changeSet id="20140408-delete-person-attributes-with-value-false" author="djazayeri">
        <comment>
            See UHM-1230: With UHM-1220 the code fix was made to correctly store phone numbers when entered as blank.
            Prior to that ticket, they were being stored as "false" in the database.
            In all of the environments (including production) there are several instances of them being false as a
            result of this bug. This changeset removes all person_attributes with value = false
        </comment>
        <delete tableName="person_attribute">
            <where>value='false'</where>
        </delete>
    </changeSet>

    <changeSet id="20140429-update-preferred-address" author="mgoodrich">
        <comment>
            See UHM-1283. Make sure no patient has more than one preferred address
            First query finds a list of all person_address_ids for persons that have more than one preferred address.
            The second query does the same, *except* that it only records a single person_address_id for each patient--
            the one with the lowest value.
            Third query updates sets preferred=0 for all person_addresses in the first set but not in the second set.
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS pa1 AS SELECT DISTINCT a.person_address_id AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.preferred = 1 AND b.preferred = 1
            AND a.person_address_id != b.person_address_id;

            CREATE TEMPORARY TABLE IF NOT EXISTS pa2 AS SELECT MIN(a.person_address_id) AS person_address_id
            FROM person_address AS a, person_address AS b WHERE a.person_id = b.person_id
            AND a.person_address_id != b.person_address_id
            AND a.preferred = 1 AND b.preferred = 1
            GROUP By a.person_id;

            UPDATE person_address SET preferred = 0 WHERE person_address_id IN
            (SELECT person_address_id FROM pa1 WHERE person_address_id NOT IN (SELECT person_address_id FROM pa2));
        </sql>
    </changeSet>

    <!--<changeSet id="20140731-give-all-users-role-to-view-patient-search" author="djazayeri">-->
    <!--<comment>-->
    <!--See UHM-1500: create script to enable Patient Medical Information for all users-->
    <!--We are rolling out a change where to view the patient dashboard, a user will need to-->
    <!--have a new role "Application Role: patientMedicalInformation".  We will use this role-->
    <!--to limit who can view the patient dashboard.  But, to start, we want all existing users-->
    <!--to have this role-->
    <!--</comment>-->
    <!--<sql>-->
    <!--DELETE FROM user_role WHERE role='Application Role: patientMedicalInformation';-->
    <!--INSERT INTO user_role (user_id, role) SELECT user_id, 'Application Role: patientMedicalInformation'-->
    <!--FROM users WHERE retired = 0 AND username !='scheduler' AND username !='daemon' AND username !='pacsintegration';-->
    <!--</sql>-->
    <!--</changeSet>-->

    <changeSet id="20141201-void-duplicate-discharge-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate discharge encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS discharge_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = 'b6631959-2105-49dd-b154-e1249e0fbcd7')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-transfer-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM discharge_encounters_to_void);
        </sql>
    </changeSet>


    <changeSet id="20141201-void-duplicate-transfer-encounters-1" author="mgoodrich">
        <comment>
            See UHM-1705. Void any duplicate transfer encounters (note doesn't handle triplicates or greater,etc)
            (There are no obs in transfer encounters, so we don't worry about voiding obs)
        </comment>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS transfer_encounters_to_void AS select MAX(encounter_id) AS encounter_id FROM encounter
            WHERE encounter_type = (SELECT encounter_type_id FROM encounter_type WHERE uuid = '436cfe33-6b81-40ef-a455-f134a9f7e580')
            AND voided = 0
            GROUP BY patient_id, visit_id, encounter_type, encounter_datetime, creator, date_created HAVING (count(*)>1);

            UPDATE encounter_provider SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);

            UPDATE encounter SET voided = 1, voided_by = (SELECT user_id FROM users WHERE system_id='admin'), date_voided = NOW(), void_reason = 'duplicate voided by changeset 20141201-void-duplicate-discharge-encounters-1 (UHM-1705)'
            WHERE encounter_id IN (SELECT encounter_id FROM transfer_encounters_to_void);
        </sql>
    </changeSet>

    <changeSet id="20141202-drop-temporary-tables-1" author="mgoodrich">
        <validCheckSum>3:88bdd404390006430b2f010435e46004</validCheckSum>
        <comment>
            See UHM-1705. Clean up after previous two change sets
        </comment>
        <sql>
            DROP TABLE IF EXISTS transfer_encounters_to_void;
            DROP TABLE IF EXISTS discharge_encounters_to_void;
        </sql>
    </changeSet>


    <changeSet id="20150427-migrate-accession-number-to-order-number-1a" author="mgoodrich">
        <comment>
            Copy the accession number of all orders to the new order_number field
        </comment>
        <sql>
            UPDATE `orders` SET order_number = accession_number WHERE accession_number IS NOT NULL;
        </sql>
    </changeSet>

    <changeSet id="20150427-migrate-accession-number-to-order-number-2" author="mgoodrich">
        <comment>
            Set the accession number column to null
        </comment>
        <sql>
            UPDATE `orders` SET accession_number = NULL;
        </sql>
    </changeSet>

    <changeSet id="20150429-create-radiology-seed-global-property" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM global_property WHERE property='order.nextRadiologyOrderNumberSeed';
            </sqlCheck>
        </preConditions>
        <comment>
            Create the radiology order number seed global property
        </comment>
        <insert tableName="global_property">
            <column name="property" value="order.nextRadiologyOrderNumberSeed"/>
            <column name="property_value" value="0"/>
            <column name="description" value="Seed used for generating radiology order numbers"/>
            <column name="uuid" value="decb8a87-4e6a-4810-8cb6-991e15c8d5cd" />
        </insert>
    </changeSet>


    <changeSet id="20150427-initialize-radiology-order-seed-1d" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <not>
                <sqlCheck expectedResult="0">
                    SELECT COUNT(*) FROM orders;
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            Set the radiology order seed based on the current max order number
        </comment>
        <sql>
            SET @seed_value = (select MAX(order_id) + 1 FROM orders);
            UPDATE `global_property` SET property_value = @seed_value WHERE property='order.nextRadiologyOrderNumberSeed';
        </sql>
    </changeSet>

    <changeSet id="20150429-set-expire-date-to-date-activated" author="mgoodrich">
        <comment>
            Hack workaround--we need to set the expire date to the date activated on all radiology orders so that they are never considered "active".
            In the new 1.10 Order API you cannot set a test as "performed", nor can you have two active orders at the time; this changeset subverts that
        </comment>
        <sql>
            UPDATE `orders` SET auto_expire_date = date_activated;
        </sql>
    </changeSet>

    <changeSet id="20150430-migrate-printing-history-to-new-concept" author="mseaton">
        <validCheckSum>3:b8dc255ebf56445e5bebb71ab6105b29</validCheckSum>
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.pihcore.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>


    <changeSet id="20150911-migrate-patient-identifier-location" author="mgoodrich">
        <comment>
            When we opened CDI and migrated location information, we forget to migrate the location the ZL EMR ID
        </comment>
        <sql>
            UPDATE `patient_identifier` SET location_id = (SELECT location_id FROM location WHERE uuid='24bd1390-5959-11e4-8ed6-0800200c9a66')
            WHERE location_id = (SELECT location_id FROM location WHERE uuid='a084f714-a536-473b-94e6-ec317b152b43')
            AND identifier_type = (SELECT patient_identifier_type_id FROM patient_identifier_type WHERE uuid='a541af1e-105c-40bf-b345-ba1fd6a59b85');
        </sql>
    </changeSet>

    <changeSet id="20150921-migrate-printing-history-to-new-concept" author="mgoodrich">
        <validCheckSum>3:b8dc255ebf56445e5bebb71ab6105b29</validCheckSum>
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            This is an exact copy of 20150921-migrate-printing-history-to-new-concept as listed above--we need to run again since we rolled back temporarily to the
            the old patient registration

            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.pihcore.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>

    <changeSet id="20150928-migrate-printing-history-to-new-concept" author="mgoodrich">
        <validCheckSum>3:b8dc255ebf56445e5bebb71ab6105b29</validCheckSum>
        <preConditions onFail="CONTINUE">
            <not>
                <sqlCheck expectedResult="0">
                    select count(*) from obs where concept_id = (select concept_id from concept where uuid = '9d1b04df-ee77-11e4-a257-54ee7513a7ff')
                </sqlCheck>
            </not>
        </preConditions>
        <comment>
            This is an exact copy of 20150921-migrate-printing-history-to-new-concept as listed above--we need to run again since we rolled back temporarily to the
            the old patient registration

            The legacy patientregistration module used a concept named "PrintingIDCardStatus" to store observations as
            to whether an id card was successfully scanned after printing, or if printing failed.
            We have decided to migrate away from this concept (which models answers as text-obs and does not have a consistent uuid across our servers),
            in favor of a new coded concept with a consistent uuid.  This changeset handles the data migration necessary for this,
            but only should be enabled/run on a given system once we have transitioned to the new patient registration.
        </comment>
        <customChange class="org.openmrs.module.pihcore.liquibase.PrintingIDCardStatusChangeSet"/>
    </changeSet>


    <changeSet id="20160708-mh-encounters-have-proper-form" author="mgoodrich">
        <comment>
            Because of a bug, some mental health encounters have form_id=null, see: https://tickets.pih-emr.org/browse/UHM-2524
        </comment>
        <sql>
            UPDATE encounter SET form_id = (SELECT form_id FROM form WHERE encounter_type in (SELECT encounter_type_id FROM encounter_type WHERE uuid='a8584ab8-cc2a-11e5-9956-625662870761'))
            WHERE encounter_type in (SELECT encounter_type_id FROM encounter_type WHERE uuid='a8584ab8-cc2a-11e5-9956-625662870761') AND form_id is NULL;
        </sql>
    </changeSet>

    <changeSet id="20170217-map-pih-and-ciel-concepts" author="cioan" runAlways="true" runOnChange="true">
        <validCheckSum>3:b84aeaf4169f7d86e311db84f5afe0d8</validCheckSum> <!-- old checksum with broken sql script -->
        <validCheckSum>3:66fa79bc2d0078702e57dca3f1601b90</validCheckSum> <!-- new checksum with fixed sql script -->
        <comment>
            UHM-2768, Create concept mapping View at startup
        </comment>
        <sql>
            create or replace view report_mapping as
            select crm.concept_id, crs.name "source", crt.code
            from concept_reference_map crm, concept_reference_term crt, concept_reference_source crs
            where crm.concept_reference_term_id = crt.concept_reference_term_id
            and crt.concept_source_id = crs.concept_source_id
            and crt.retired = 0
            and crs.retired = 0
            and crs.name in ('PIH','CIEL');
        </sql>
    </changeSet>


    <changeSet id="20170717-create-view-for-most-recent-patient-name-and-address" author="mgoodrich">
        <comment>
            UHM-2832: Create view for most recent patient name and address: https://tickets.pih-emr.org/browse/UHM-2832
        </comment>
        <sql>
            create or replace view current_name_address as
            select p.person_id, p.gender,p.birthdate, p.birthdate_estimated, n.given_name, n.family_name, n.middle_name "nick_name",
            a.person_address_id, a.country, a.state_province "department", a.city_village "commune", a.address3 "section_communal", a.address1 "locality", a.address2 "street_landmark"
            from person p
            LEFT OUTER JOIN person_name n ON n.person_name_id = (select person_name_id from person_name n2 where n2.person_id = p.person_id and n2.voided = 0
            order by n2.preferred desc, n2.date_created desc limit 1)
            LEFT OUTER JOIN person_address a ON a.person_address_id = (select person_address_id from person_address a2 where a2.person_id = p.person_id and a2.voided = 0
            order by a2.preferred desc, a2.date_created desc limit 1)
            where p.voided = 0;
        </sql>
    </changeSet>

    <changeSet id="20180223-reword-question-on-NCD-form" author="ddesimone">
        <comment>
            UHM-3267: Reword question on NCD forms: https://tickets.pih-emr.org/browse/UHM-3267
        </comment>
        <sql>
            UPDATE obs
            set value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'NO'),
            comments =
            (select Concat('updated on ',sysdate(), ' for reworded question') from dual)
            where concept_id =
            (select concept_id from report_mapping where source = 'PIH' and code = '10555')
            and value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'TRUE')
            ;

            UPDATE obs
            set value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'YES'),
            comments =
            (select Concat('updated on ',sysdate(), ' for reworded question') from dual)
            where concept_id =
            (select concept_id from report_mapping where source = 'PIH' and code = '10555')
            and value_coded =
            (select concept_id from report_mapping where source = 'PIH' and code = 'FALSE')
            ;
        </sql>
    </changeSet>

    <changeSet id="20180304-01" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property where property_value like '%sierra leone%' and property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            One-time deletion of Sierra Leone address hierarchy so we can repopulate it with the correct levels.
            (Precondition is so that it's only run in Sierra Leone)
        </comment>
        <sql>
            set foreign_key_checks = 0;
            delete from address_hierarchy_address_to_entry_map;
            delete from address_hierarchy_entry;
            delete from address_hierarchy_level;
            set foreign_key_checks = 1;
        </sql>

    </changeSet>

    <changeSet id="20180308-truncate-triage-wait-time" author="ddesimone">
        <comment>
            UHM-3288: Review Validation issues that make occur now that API enforces that concepts that don't "allow precise" can't contain decimal
        </comment>
        <sql>
            UPDATE obs SET value_numeric = TRUNCATE(value_numeric,0) WHERE concept_id = (SELECT concept_id FROM concept WHERE uuid='d9a8fc6f-8695-46b8-854f-2c9e818b4568');
        </sql>
    </changeSet>

    <changeSet id="20180320-migrate-mch-obs-to-diagnoses" author="ball">
        <comment>
            UHM-3757 Migrate (prenatal followup) danger signs to diagnoses
        </comment>
        <sql>
            -- ANC followup (create a new diagnosis order obs)
            insert into obs
                (person_id, concept_id, value_coded, encounter_id, obs_datetime, location_id,
                 obs_group_id, comments, creator, date_created, uuid)
            select person_id,
                   (select concept_id from concept_name
                     where name like 'Diagnosis order' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   (select concept_id from concept_name
                     where name like 'Secondary' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   encounter_id, obs_datetime, location_id, obs_group_id, 'anc inserted secondary order', creator, now(), uuid()
              from obs
             where concept_id =
                (select concept_id from concept_name
                  where name like 'Sign/Symptom name' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and voided = 0
               and encounter_id IN
                      (select encounter_id from encounter
                        where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'ANC Followup'));

            -- ANC followup (change the concept for the diagnosis)
            UPDATE obs
            set concept_id =
                  (select concept_id from concept_name
                    where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0),
                comments = (select Concat('anc followup diagnosis updated ',sysdate()) from dual)
            where concept_id =
                    (select concept_id from concept_name
                      where name like 'Sign/Symptom name' and locale = 'en' and locale_preferred = 1 and voided = 0)
              and voided = 0
              and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'ANC Followup'));

            -- ANC followup (change the obsgroup for the diagnosis)
            UPDATE obs
            set concept_id =
                    (select concept_id from concept_name
                      where name like 'Visit Diagnoses' and locale = 'en' and locale_preferred = 1 and voided = 0),
                comments = (select Concat('anc followup diagnosis obsgroup updated ',sysdate()) from dual)
            where concept_id =
                    (select concept_id from concept_name
                      where name like 'Signs and symptoms' and locale = 'en' and locale_preferred = 1 and voided = 0)
              and voided = 0
              and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'ANC Followup'));
        </sql>

    </changeSet>

    <changeSet id="20180321-migrate-delivery-findings-to-diagnoses" author="ball">
        <comment>
            UHM-3757 Migrate (delivery) findings to diagnoses
        </comment>
        <sql>
            -- Delivery (create obsgroup and migrate data)
            drop table if exists temp_delivery;
            create table temp_delivery (
                id INT not null auto_increment primary key,
                encounter_id int(11) not NULL,
                person_id int(11) not NULL,
                location_id int(11) not NULL,
                complication_obs_id int(11) not NULL,
                obs_group_id int(11) default NULL,
                obs_datetime datetime default NULL,
                creator int(11) not NULL
            );

            -- Add data to temporary table
            insert into temp_delivery
                (complication_obs_id, encounter_id, person_id, location_id, obs_datetime, creator)
            select obs_id, encounter_id, person_id, location_id, obs_datetime, creator
              from obs
             where voided = 0
               and concept_id =
                    (select concept_id from concept_name
                      where name like 'Complications at delivery set' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'MCH Delivery'));

            -- Create obsgroup; Use accession number temporarily to hold the complications obs_id
            insert into obs
                (encounter_id, person_id, location_id, obs_datetime, creator,
                 concept_id, comments, accession_number, date_created, uuid)
            select encounter_id, person_id, location_id, obs_datetime, creator,
                   (select concept_id from concept_name
                     where name like 'Visit Diagnoses' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   'delivery diagnosis obsgroup',
                   obs_id, now(), uuid()
              from obs
             where voided = 0
               and concept_id =
                    (select concept_id from concept_name
                      where name like 'Complications at delivery set' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'MCH Delivery'));

            -- Add obsgroup id to the temporary table
            update temp_delivery, obs
               set temp_delivery.obs_group_id = obs.obs_id
             where obs.voided = 0
               and obs.comments = 'delivery diagnosis obsgroup'
               and temp_delivery.complication_obs_id = obs.accession_number;

            -- Add obsgroup id to obs table
            update temp_delivery, obs
               set obs.obs_group_id = temp_delivery.obs_group_id
             where obs.voided = 0
               and temp_delivery.complication_obs_id = obs.obs_id;

            -- Delivery (create a new diagnosis order obs)
            insert into obs
                (person_id, concept_id, value_coded, encounter_id, obs_datetime,
                 location_id, obs_group_id, comments, creator, date_created, uuid)
            select person_id,
                (select concept_id from concept_name
                  where name like 'Diagnosis order' and locale = 'en' and locale_preferred = 1 and voided = 0),
                (select concept_id from concept_name
                  where name like 'Secondary' and locale = 'en' and locale_preferred = 1 and voided = 0),
                encounter_id, obs_datetime, location_id, obs_group_id, 'delivery inserted secondary order', creator, now(), uuid()
             from temp_delivery;

            -- Delivery (change the concept for the diagnosis)
            UPDATE obs
               set concept_id =
                    (select concept_id from concept_name
                      where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   comments = (select Concat('delivery diagnosis updated ',sysdate()) from dual)
            where concept_id =
                    (select concept_id from concept_name
                      where name like 'Complications at delivery set' and locale = 'en' and locale_preferred = 1 and voided = 0)
              and voided = 0
              and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type =
                                (select encounter_type_id from encounter_type where name like 'MCH Delivery'));

            -- Cleanup temp trash for delivery obsgroups
            update obs
               set accession_number = NULL
             where obs_id IN (select obs_group_id from temp_delivery);

            drop table if exists temp_delivery;

        </sql>
    </changeSet>

    <changeSet id="20181024-add-pathology-order-type-2" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">select count(*) from order_type where uuid = '65c912c2-88cf-46c2-83ae-2b03b1f97d3a'</sqlCheck>
        </preConditions>
        <comment>
            Insert order type for test orders; (we also install this via a bundle, but do this here so it is available
            for the migration change set below)
        </comment>
        <insert tableName="order_type">
            <column name="name" value="Pathology Test Order" />
            <column name="description" value="Order type for pathology test orders" />
            <column name="java_class_name" value="org.openmrs.TestOrder" />
            <column name="creator" valueNumeric="1" />
            <column name="date_created" valueDate="2018-10-24" />
            <column name="retired" valueNumeric="0" />
            <column name="uuid" value="65c912c2-88cf-46c2-83ae-2b03b1f97d3a" />
        </insert>
    </changeSet>


    <changeSet id="20181024-migrate-pathology-orders-to-new-pathology-order-type" author="mgoodrich">
        <validCheckSum>3:c3896cf035dd9d2f98ef29a02501740b</validCheckSum>
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">
                select count(*) from order_type where uuid='65c912c2-88cf-46c2-83ae-2b03b1f97d3a'
            </sqlCheck>
        </preConditions>
        <comment>
            Migrates existing orders to the Pathology Order Type; should be run once, before Lab Workflow app is rolled out
            As a hack to preserve humci test data, does not migrate orders without a location
        </comment>
        <sql>
            update orders o, encounter e set o.order_type_id = (select order_type_id from order_type where uuid='65c912c2-88cf-46c2-83ae-2b03b1f97d3a')
            where o.order_type_id = (select order_type_id from order_type where uuid='52a447d3-a64a-11e3-9aeb-50e549534c5e' )
            and e.encounter_id=o.encounter_id
            and e.location_id is not null;
        </sql>

    </changeSet>


    <changeSet id="20181214-delete-duplicate-radio-concept" author="ball">
        <validCheckSum>3:ad96b0433d7257b58b0540ca5a506f35</validCheckSum>
        <validCheckSum>3:faa1724e52de08eff515f3909603e94b</validCheckSum>
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">
                select count(*) from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
            </sqlCheck>
        </preConditions>
        <comment>
            Remove the radio concept which had a duplicate name on another concept
        </comment>
        <sql>
            delete from concept_answer
            where concept_id IN (select concept_id from concept where uuid = '159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_answer
            where answer_concept IN (select concept_id from concept where uuid = '159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_name where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_name
            where concept_id = (select concept_id from concept where uuid='3cd9874e-26fe-102b-80cb-0017a47871b2')
            and uuid='106464BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB';

            delete from concept_description where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept_reference_map where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from obs where concept_id IN (select concept_id from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');

            delete from concept where uuid='159388AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';
        </sql>

    </changeSet>

    <changeSet id="20190305-01" author="ball">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property where property_value like '%sierra leone%' and property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            Second-time deletion of Sierra Leone address hierarchy so we can repopulate it with the correct levels.
            (Precondition is so that it's only run in Sierra Leone)
        </comment>
        <sql>
            set foreign_key_checks = 0;
            delete from address_hierarchy_address_to_entry_map;
            delete from address_hierarchy_entry;
            delete from address_hierarchy_level;
            set foreign_key_checks = 1;
        </sql>

    </changeSet>

    <changeSet id="20190305-02" author="ball">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property where property_value like '%sierra leone%' and property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            Third-time deletion of Sierra Leone address hierarchy so we can repopulate it with the correct levels.
            (Precondition is so that it's only run in Sierra Leone)
        </comment>
        <sql>
            set foreign_key_checks = 0;
            delete from address_hierarchy_address_to_entry_map;
            delete from address_hierarchy_entry;
            delete from address_hierarchy_level;
            set foreign_key_checks = 1;
        </sql>

    </changeSet>


    <changeSet id="20190712-migrate-type2dm-to-type2dm-oral-agents" author="ball">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property gp
                 cross join concept_name cn
                 where gp.property_value like '%haiti%'
                   and gp.property ='layout.address.format'
                   and cn.name like 'Type 2 diabetes on oral hypoglycemic agents only'
                   and cn.locale = 'en'
                   and cn.locale_preferred = 1
                   and cn.voided = 0;
            </sqlCheck>
        </preConditions>
        <comment>
            UHM-3923 Migrate NCD Diabetes Type 2 to Type 2 on oral agents
        </comment>
        <sql>
            -- Diabetes Type 2 (change the concept to Diabetes Type 2 Insulin-dependent)
            update obs
               set value_coded =
                    (select concept_id from concept_name
                      where name like 'Type 2 diabetes on oral hypoglycemic agents only'
                        and locale = 'en' and locale_preferred = 1 and voided = 0),
                   comments = (select Concat('changed from type 2 diabetes',sysdate()) from dual)
             where value_coded =
                    (select distinct(concept_id) from concept_name
                      where name like 'Type 2 diabetes' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and concept_id =
                    (select distinct(concept_id) from concept_name
                      where name like 'Type of diabetes diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type IN
                            (select encounter_type_id from encounter_type where name like 'NCD%'))
               and voided = 0;
        </sql>

    </changeSet>

    <changeSet id="20190712-migrate-ncd-dm-diagnoses-to-construct" author="ball">
        <validCheckSum>3:b224b550cafdf7f484726dff15eb583a</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property gp
                 where gp.property_value like '%haiti%'
                   and gp.property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            UHM-3863 Migrate NCD Diabetes diagnoses to diagnoses construct
        </comment>
        <sql>
            -- NCD Diagnoses (create obsgroup and migrate data)
            drop table if exists temp_ncd_diagnosis;

            create table temp_ncd_diagnosis (
                id INT not null auto_increment primary key,
                encounter_id int(11) not NULL,
                person_id int(11) not NULL,
                location_id int(11) not NULL,
                ncd_dx_obs_id int(11) not NULL,
                obs_group_id int(11) default NULL,
                obs_datetime datetime default NULL,
                creator int(11) not NULL
            );

            -- Add diabetes dx data to temporary table
            insert into temp_ncd_diagnosis
                (ncd_dx_obs_id, encounter_id, person_id, location_id, obs_datetime, creator)
            select obs_id, encounter_id, person_id, location_id, obs_datetime, creator
              from obs
             where voided = 0
               and concept_id =
                        (select concept_id from concept_name
                          where name like 'Type of diabetes diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and encounter_id IN
                        (select encounter_id from encounter
                          where encounter_type IN
                                    (select encounter_type_id from encounter_type where name like 'NCD%'));

            -- Create obsgroup; Use obs_group_id on the parent obs temporarily to hold the ncd diagnosis child obs_id
            insert into obs
                (encounter_id, person_id, location_id, obs_datetime, creator,
                 concept_id, comments, obs_group_id, date_created, uuid)
            select encounter_id, person_id, location_id, obs_datetime, creator,
                   (select concept_id from concept_name
                     where name like 'Visit Diagnoses' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   'ncd diagnosis obsgroup',
                   obs_id, now(), uuid()
              from obs
             where voided = 0
               and concept_id =
                        (select concept_id from concept_name
                          where name like 'Type of diabetes diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and encounter_id IN
                        (select encounter_id from encounter
                          where encounter_type IN
                                    (select encounter_type_id from encounter_type where name like 'NCD%'));

            -- Add obsgroup id to the temporary table
            update temp_ncd_diagnosis, obs
               set temp_ncd_diagnosis.obs_group_id = obs.obs_id, obs.obs_group_id = null
             where obs.voided = 0
               and obs.comments = 'ncd diagnosis obsgroup'
               and temp_ncd_diagnosis.ncd_dx_obs_id = obs.obs_group_id;

            -- Add obsgroup id to obs table
            update temp_ncd_diagnosis, obs
               set obs.obs_group_id = temp_ncd_diagnosis.obs_group_id
             where obs.voided = 0
               and temp_ncd_diagnosis.ncd_dx_obs_id = obs.obs_id;

            -- NCD dx order (create a new diagnosis order obs)
            insert into obs
                (person_id, concept_id, value_coded, encounter_id, obs_datetime,
                 location_id, obs_group_id, comments, creator, date_created, uuid)
            select person_id,
                   (select concept_id from concept_name
                     where name like 'Diagnosis order' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   (select concept_id from concept_name
                     where name like 'Secondary' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   encounter_id, obs_datetime, location_id, obs_group_id, 'ncd dx inserted secondary order', creator, now(), uuid()
              from temp_ncd_diagnosis;

            -- NCD dx (change the concept for the diagnosis)
            update obs
               set concept_id =
                    (select concept_id from concept_name
                      where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   comments = (select Concat('ncd diagnosis updated ',sysdate()) from dual)
             where concept_id =
                    (select concept_id from concept_name
                      where name like 'Type of diabetes diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and voided = 0
               and encounter_id IN
                    (select encounter_id from encounter
                      where encounter_type IN
                                (select encounter_type_id from encounter_type where name like 'NCD%'));

            -- Cleanup temp trash for ncd dx obsgroups

            drop table if exists temp_ncd_diagnosis;
        </sql>
    </changeSet>

    <changeSet id="20190715-migrate-ncd-diagnoses-to-construct" author="ball">
        <validCheckSum>3:b47d9d18ff6b93d2539d524d751ef9ca</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property gp
                where gp.property_value like '%haiti%'
                and gp.property ='layout.address.format';
            </sqlCheck>
        </preConditions>
        <comment>
            UHM-3863 Migrate NCD Diagnoses to diagnoses construct
        </comment>
        <sql>
            drop table if exists temp_ncd_diagnosis;

            create table temp_ncd_diagnosis (
                id INT not null auto_increment primary key,
                encounter_id int(11) not NULL,
                person_id int(11) not NULL,
                location_id int(11) not NULL,
                ncd_dx_obs_id int(11) not NULL,
                obs_group_id int(11) default NULL,
                obs_datetime datetime default NULL,
                creator int(11) not NULL
            );

            -- Add dx data to temporary table
            insert into temp_ncd_diagnosis
                (ncd_dx_obs_id, encounter_id, person_id, location_id, obs_datetime, creator)
             select obs_id, encounter_id, person_id, location_id, obs_datetime, creator
               from obs
              where voided = 0
                and concept_id =
                        (select concept_id from concept_name
                          where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
                and value_coded !=
                        (select concept_id from concept_name
                          where name like 'Other' and locale = 'en' and locale_preferred = 1 and voided = 0)
                and obs_group_id is NULL
                and encounter_id IN
                        (select encounter_id from encounter
                          where encounter_type IN
                                    (select encounter_type_id from encounter_type where name like 'NCD%'));

            -- Create obsgroup; Use obs_group_id temporarily to hold the ncd diagnosis obs_id
            insert into obs
                (encounter_id, person_id, location_id, obs_datetime, creator,
                 concept_id, comments, obs_group_id, date_created, uuid)
            select encounter_id, person_id, location_id, obs_datetime, creator,
                   (select concept_id from concept_name
                     where name like 'Visit Diagnoses' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   'ncd diagnosis obsgroup',
                   obs_id, now(), uuid()
              from obs
             where voided = 0
               and concept_id =
                        (select concept_id from concept_name
                          where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and value_coded !=
                        (select concept_id from concept_name
                          where name like 'Other' and locale = 'en' and locale_preferred = 1 and voided = 0)
               and obs_group_id is NULL
               and encounter_id IN
                        (select encounter_id from encounter
                          where encounter_type IN
                            (select encounter_type_id from encounter_type where name like 'NCD%'));

            -- Add obsgroup id to the temporary table
            update temp_ncd_diagnosis, obs
               set temp_ncd_diagnosis.obs_group_id = obs.obs_id, obs.obs_group_id = null
             where obs.voided = 0
               and obs.comments = 'ncd diagnosis obsgroup'
               and temp_ncd_diagnosis.ncd_dx_obs_id = obs.obs_group_id;

            -- Add obsgroup id to obs table
            update temp_ncd_diagnosis, obs
               set obs.obs_group_id = temp_ncd_diagnosis.obs_group_id,
                   obs.comments = (select Concat('ncd diagnosis updated ',sysdate()) from dual)
             where obs.voided = 0
               and temp_ncd_diagnosis.ncd_dx_obs_id = obs.obs_id
               and obs.concept_id =
                        (select concept_id from concept_name
                          where name like 'Diagnosis' and locale = 'en' and locale_preferred = 1 and voided = 0);

            -- NCD dx order (create a new diagnosis order obs)
            insert into obs
                (person_id, concept_id, value_coded,
                 encounter_id, obs_datetime,
                 location_id, obs_group_id, comments, creator, date_created, uuid)
            select person_id,
                   (select concept_id from concept_name
                     where name like 'Diagnosis order' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   (select concept_id from concept_name
                     where name like 'Secondary' and locale = 'en' and locale_preferred = 1 and voided = 0),
                   encounter_id, obs_datetime, location_id, obs_group_id, 'ncd dx inserted secondary order', creator, now(), uuid()
             from temp_ncd_diagnosis;

            drop table if exists temp_ncd_diagnosis;
        </sql>
    </changeSet>


    <changeSet id="20190722-01" author="mgoodrich" runAlways="true" runOnChange="true">
        <comment>
            Hack to clean out bad entries in the metadatasharing_imported_item table
            See: UHM-3949: https://pihemr.atlassian.net/browse/UHM-3949
            First finds all duplicates where at least one has a date_imported and picks the earliest date_imported to delete
            Then finds all duplicates where all date_imported are null and picks one to keep based on primary key
            Note that "runOnChange" is set to true, so will run on every startup
        </comment>
        <sql>
            create temporary table imported_items_to_delete select i1.imported_item_id
            from metadatasharing_imported_item i1, metadatasharing_imported_item i2
            where i1.uuid = i2.uuid and i1.imported_item_id != i2.imported_item_id
            and IFNULL(i1.date_imported, '1000-01-01') &lt; i2.date_imported;

            insert into imported_items_to_delete select i1.imported_item_id
            from metadatasharing_imported_item i1, metadatasharing_imported_item i2
            where i1.uuid = i2.uuid and i1.imported_item_id != i2.imported_item_id
            and i1.date_imported is null and i2.date_imported is null
            and i1.imported_item_id &lt; i2.imported_item_id;

            delete from metadatasharing_imported_item where imported_item_id in
            (select distinct imported_item_id from imported_items_to_delete);
        </sql>

    </changeSet>


    <changeSet id="20190731-update-glucose-concept-name" author="ball">

        <comment>
            UHM-3974 Update the glucose concept name
        </comment>

        <sql>
            -- Update english names
            -- Prefer Serum Glucose
            update concept_name
               set locale_preferred = 1
             where uuid = '3e12cb7a-26fe-102b-80cb-0017a47871b2';
            -- Synonym Glucose
            update concept_name
               set locale_preferred = 0
             where uuid = '7bf57a65-9d0e-4a36-a646-926c724d6ad3';

            -- Update French names
            -- Prefer Glucose serique
            update concept_name
               set locale_preferred = 1, concept_name_type = 'FULLY_SPECIFIED'
             where uuid = 'f5b04bb6-d5db-102d-ad2a-000c29c2a5d7';
            -- Synonym Glycemie
            update concept_name
               set locale_preferred = 0, concept_name_type = NULL
             where uuid = '3e12ccec-26fe-102b-80cb-0017a47871b2';
        </sql>
    </changeSet>

    <changeSet id="20190805-void-duplicate-spanish-concept-name" author="ball">
        <validCheckSum>3:8b10e2250e371f9d047551308f1d2043</validCheckSum>
        <comment>
            UHM-3957 Void incorrect Lactic Acidosis spanish name (En el pasado)
        </comment>

        <sql>
            -- Void Spanish name
            update concept_name
            set voided = 1, date_voided = now(),
            void_reason = 'Bad and duplicate Spanish name',
            voided_by = 1
            where uuid = '8e5aece0-bb5f-11e8-8419-aa0059ea79c6';
        </sql>
    </changeSet>

    <changeSet id="20190909-retire-drugs" author="ball">
        <validCheckSum>3:da828e8b815c7aeee8423bbd8d9ed935</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from global_property gp
                where gp.property_value like '%haiti%'
                and gp.property ='layout.address.format';
            </sqlCheck>
        </preConditions>

        <comment>
            UHM-4014 Retire medications from HUM drug list
        </comment>

        <sql>
            -- Retire drugs per Laura McMeel
            update drug
            set retired = 1, date_retired = now(),
            retire_reason = 'Retire per Laura McMeel',
            retired_by = 1
            where uuid IN ('93b4de46-d986-11e5-b5d2-0a1d41d68578',
            'c7ac13a0-ca3e-4765-b08a-e47749964d5a',
            'a40da9d4-c981-11e7-abc4-cec278b6b50a',
            '4ec74967-47e6-4f6d-882b-8c2efd466a7b',
            '93b4e1d4-d986-11e5-b5d2-0a1d41d68578',
            '158b8bd0-4472-11e6-beb8-9e71128cae77',
            'f75e1e94-b1be-11e3-a5e2-0800200c9a66',
            'a35cc637-e2b7-4538-a495-efb77b13a524',
            '93b4e044-d986-11e5-b5d2-0a1d41d68578',
            '33ab2f74-ef36-4552-8221-8ac1bf8be86f',
            'f75e1e90-b1be-11e3-a5e2-0800200c9a66',
            '93b4d982-d986-11e5-b5d2-0a1d41d68578');
        </sql>
    </changeSet>

    <changeSet id="20190920-pihcore-create-functions" author="jmbabazi" runAlways="true" runOnChange="true">
        <sqlFile endDelimiter="#" path="sql/procedures/create_functions.sql" stripComments="true" />
    </changeSet>

    <changeSet id="20191108-retire-uric-acid-concept" author="ball">
        <validCheckSum>3:939354f3f17abec894b5376f8db6d00a</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from concept
                where uuid = 'd6e20676-e800-4f26-a8b2-96a2127201dd';
            </sqlCheck>
        </preConditions>
        <comment>
            UHM-4165 Retire Uric acid concept
        </comment>

        <sql>
            update concept
            set retired = 1, date_retired = now(),
            retire_reason = 'Replaced by CIEL concept',
            retired_by = 1
            where uuid = 'd6e20676-e800-4f26-a8b2-96a2127201dd';
        </sql>
    </changeSet>


    <changeSet id="20200106-program-enroll-mh-patients" author="ball">
        <validCheckSum>3:69fddd0f7e765bf59a52cd2b5b9c6a0b</validCheckSum>
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*)
                from location l, location_tag_map ltm
                where l.name like '%belladere%'
                and l.location_id = ltm.location_id
                and ltm.location_tag_id =
                (select lt.location_tag_id
                from location_tag lt
                where lt.name like 'Login Location')
            </sqlCheck>
        </preConditions>
        <comment>
            On mental health laptops, enroll patients into mental health program
            if they have a Mental Health encounter and not already enrolled.
        </comment>
        <sql>
            insert into patient_program
            (program_id, date_created, uuid,
            patient_id, location_id, creator, date_enrolled)
            select (select p.program_id from program p where p.name like 'Mental Health') as programId,
            now(), uuid(),
            e.patient_id, e.location_id, e.creator, min(e.encounter_datetime)
            from encounter e

            inner join encounter_type as et
            on et.name = 'Mental Health Consult'
            and e.encounter_type = et.encounter_type_id

            where e.voided = 0
            and e.patient_id IN
            (select distinct(active.patient_id) from encounter active
            where active.encounter_datetime > '2019-01-01 00:00:00'
            and active.voided = 0
            and active.encounter_type = et.encounter_type_id)

            and not exists
            (select 1 from patient_program pp
            where pp.patient_id = e.patient_id
            and pp.voided = 0
            and pp.program_id = (select pr.program_id from program pr where pr.name like 'Mental Health'))
            group by e.patient_id;
        </sql>
    </changeSet>

    <changeSet id="20200310-01" author="mgoodrich">
        <comment>
            Make Mirebalais Metadata module not mandatory (so we can remove it)
        </comment>
        <sql>
            update global_property set property_value='false' where property='mirebalaismetadata.mandatory';
        </sql>
    </changeSet>

    <changeSet id="20200407-duplicate-name-chorioamnionitis" author="ball">
        <comment>
            UHM-4410 Void Chorioamnionitis duplicate names
        </comment>

        <sql>
            update concept_name
            set voided = 1, date_voided = now(),
                void_reason = 'Duplicate Chorioamnionitis name',
                voided_by = 1
            where concept_id = (select concept_id from concept where uuid = '137298AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA')
              and (name like 'Chorio%' OR name like 'Corio%');
        </sql>
    </changeSet>

    <changeSet id="20200416-fix-liberia-locations" author="mgoodrich">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                select count(*) from location where uuid='f6f87d10-f290-11e4-b939-0800200c9a66';
            </sqlCheck>
        </preConditions>

        <comment>
            UHM-4501: Kouka: unable to save mental health form when visit is over 30 days ago?
            f6f87d10-f290-11e4-b939-0800200c9a66 is Pleebo uuid, only run on existing Liberia servers
            (this will also skip when installing new servers since locations will not yet
            be installed)
        </comment>

        <sql>
            set @pleebo = (select location_id from location where uuid='f6f87d10-f290-11e4-b939-0800200c9a66');
            set @jjdossen = (select location_id from location where uuid='6fa7bab5-1ca5-4b77-8c31-80c9589af952');
            set @health_facility = (select location_id from location where uuid='5af1ffcd-5178-11ea-a500-645d86728797');

            update visit set location_id=@health_facility where location_id in (@pleebo, @jjdossen);
            update encounter set location_id=@health_facility where location_id in (@pleebo, @jjdossen);
            update patient_identifier set location_id=@health_facility where location_id in (@pleebo, @jjdossen);
        </sql>
    </changeSet>

    <changeSet id="20200430-wellbody-sl-locations" author="mgoodrich">
        <preConditions onFail="CONTINUE">
            <sqlCheck expectedResult="1">
                select count(*) from location where uuid='0561303b-9868-4a1d-933d-fe52ce1b8c9f';
            </sqlCheck>
        </preConditions>

        <comment>
            UHM-4523 Add Wellbody MCH location to Sierra Leone
            0561303b-9868-4a1d-933d-fe52ce1b8c9f is Wellbody uuid, only run on existing Liberia servers
            (this will also skip when installing new servers since locations will not yet
            be installed)
            Note that the "onFail" is "CONTINUE"... this is because the first time this is run on Wellbody prod
            the new "Wellbody" location will likely not have been installed, so we will need to run this
            changeset twice
        </comment>

        <sql>
            set @wellbody_clinic = (select location_id from location where uuid='b6733150-7426-11e5-a837-0800200c9a66');
            set @wellbody_mch = (select location_id from location where uuid='dac348b7-2ece-47ad-b80a-140fc6788706');
            set @wellbody = (select location_id from location where uuid='0561303b-9868-4a1d-933d-fe52ce1b8c9f');

            update visit set location_id=@wellbody where location_id in (@wellbody_mch, @wellbody_clinic);
        </sql>
    </changeSet>

</databaseChangeLog>

